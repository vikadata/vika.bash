#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
vika_usage() {
  if [[ -n $long_usage ]]; then
    printf "vika - Vika Bash CLI for\n"
    echo

  else
    printf "vika - Vika Bash CLI for\n"
    echo

  fi

  printf "Usage:\n"
  printf "  vika [command]\n"
  printf "  vika [command] --help | -h\n"
  printf "  vika --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  get     Get Records"
  echo "  login   Login with vika-cli with token"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  VIKA_HOST"
    printf "    Your base vika api host.\n"
    printf "    Default: https://api.vika.cn/fusion/v1\n"
    echo

  fi
}

# :command.usage
vika_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "vika get - Get Records\n"
    echo

  else
    printf "vika get - Get Records\n"
    echo

  fi

  printf "Alias: g\n"
  echo

  printf "Usage:\n"
  printf "  vika get DATASHEETID [VIEWID]\n"
  printf "  vika get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  DATASHEETID"
    printf "    Which datasheet's records you want to retrive?\n"
    echo

    # :argument.usage
    echo "  VIEWID"
    printf "    Which datasheet's view's record you want to retrive?\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  vika get dstXXXXX viwYYYYY\n"
    echo

  fi
}

# :command.usage
vika_login_usage() {
  if [[ -n $long_usage ]]; then
    printf "vika login - Login with vika-cli with token\n"
    echo

  else
    printf "vika login - Login with vika-cli with token\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "Usage:\n"
  printf "  vika login TOKEN\n"
  printf "  vika login --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  TOKEN"
    printf "    What is your API Token? You can find this through left down corner: Profile\n    -> My Settings -> Developers -> API Token\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
vika_get_command() {
  # src/get_command.sh

  check_token

  # if [[ ${args[env]} ]]; then
  #     # exists, do setter
  #     VOP_ENVINRONMNET="${args[env]}"
  #     echo $VOP_ENVINRONMNET > /tmp/VOP_ENVINRONMNET
  #     echo "Success set the environment to '$VOP_ENVINRONMNET'"
  # else

  url="${VIKA_HOST}/datasheets/${args[datasheetId]}/records?viewId=${ars[viewId]}&fieldKey=name"
  if [[ ${DEBUG_MODE} ]]; then
    echo "url: ${url}"
    echo "api token: ${api_token}"
  fi;

  curl -s $url \
    -H "Authorization: Bearer ${api_token}"
}

# :command.function
vika_login_command() {
  # src/login_command.sh
  # vika login TOKEN

  FILE=~/.vika/api_token
  DIR=$(dirname $FILE)

  mkdir -p $DIR

  api_token=${args[token]}

  echo $api_token > $FILE

  echo "Login Success. Save the token to ${FILE}"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    vika_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  export VIKA_HOST="${VIKA_HOST:-https://api.vika.cn/fusion/v1}"
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  get | g )
    action="get"
    shift
    vika_get_parse_requirements "$@"
    shift $#
    ;;

  login | l )
    action="login"
    shift
    vika_login_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    vika_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
vika_get_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    vika_get_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="get"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[datasheetId]+x} ]]; then
        # :argument.validations
        args[datasheetId]=$1
        shift
      elif [[ -z ${args[viewId]+x} ]]; then
        # :argument.validations
        args[viewId]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[datasheetId]+x} ]]; then
    printf "missing required argument: DATASHEETID\nusage: vika get DATASHEETID [VIEWID]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
vika_login_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    vika_login_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="login"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[token]+x} ]]; then
        # :argument.validations
        args[token]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[token]+x} ]]; then
    printf "missing required argument: TOKEN\nusage: vika login TOKEN\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.1"
  long_usage=''
  set -e

  # src/initialize.sh
  # if ! test -f "$TOKEN_FILE"; then

  # DEFAULT_VIKA_HOST=https://api.vika.cn/fusion/v1

  # if [ -z ${VIKA_HOST+x} ]; then
  #     echo "\$VIKA_HOST is $VIKA_HOST";

  # else
  #     echo "\$VIKA_HOST is set to default '$DEFAULT_VIKA_HOST'";

  #     export VIKA_HOST=$DEFAULT_VIKA_HOST
  # fi

  check_token() {
      TOKEN_FILE=~/.vika/api_token
      if ! test -f "$TOKEN_FILE"; then
          echo "Cannot find API Token, please 'vika login' first"
          exit 1
      fi

      export api_token=$(cat $TOKEN_FILE)
  }
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "get" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      vika_get_usage
    else
      vika_get_command
    fi

  elif [[ $action == "login" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      vika_login_usage
    else
      vika_login_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
